//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PresentationTier.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateChat", ReplyAction="http://tempuri.org/IService/CreateChatResponse")]
        DataTier.Chat CreateChat(DataTier.Chat chat, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateChat", ReplyAction="http://tempuri.org/IService/CreateChatResponse")]
        System.Threading.Tasks.Task<DataTier.Chat> CreateChatAsync(DataTier.Chat chat, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetChat", ReplyAction="http://tempuri.org/IService/GetChatResponse")]
        DataTier.Chat GetChat(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetChat", ReplyAction="http://tempuri.org/IService/GetChatResponse")]
        System.Threading.Tasks.Task<DataTier.Chat> GetChatAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetChatsByName", ReplyAction="http://tempuri.org/IService/GetChatsByNameResponse")]
        System.Collections.Generic.List<DataTier.Chat> GetChatsByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetChatsByName", ReplyAction="http://tempuri.org/IService/GetChatsByNameResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DataTier.Chat>> GetChatsByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateChat", ReplyAction="http://tempuri.org/IService/UpdateChatResponse")]
        bool UpdateChat(DataTier.Chat chat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UpdateChat", ReplyAction="http://tempuri.org/IService/UpdateChatResponse")]
        System.Threading.Tasks.Task<bool> UpdateChatAsync(DataTier.Chat chat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteChat", ReplyAction="http://tempuri.org/IService/DeleteChatResponse")]
        bool DeleteChat(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteChat", ReplyAction="http://tempuri.org/IService/DeleteChatResponse")]
        System.Threading.Tasks.Task<bool> DeleteChatAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPersonsInChat", ReplyAction="http://tempuri.org/IService/GetPersonsInChatResponse")]
        System.Collections.Generic.List<DataTier.Profile> GetPersonsInChat(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPersonsInChat", ReplyAction="http://tempuri.org/IService/GetPersonsInChatResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DataTier.Profile>> GetPersonsInChatAsync(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddPersonToChat", ReplyAction="http://tempuri.org/IService/AddPersonToChatResponse")]
        bool AddPersonToChat(int chatId, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/AddPersonToChat", ReplyAction="http://tempuri.org/IService/AddPersonToChatResponse")]
        System.Threading.Tasks.Task<bool> AddPersonToChatAsync(int chatId, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemovePersonFromChat", ReplyAction="http://tempuri.org/IService/RemovePersonFromChatResponse")]
        bool RemovePersonFromChat(int chatId, int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemovePersonFromChat", ReplyAction="http://tempuri.org/IService/RemovePersonFromChatResponse")]
        System.Threading.Tasks.Task<bool> RemovePersonFromChatAsync(int chatId, int personId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : PresentationTier.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<PresentationTier.ServiceReference.IService>, PresentationTier.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DataTier.Chat CreateChat(DataTier.Chat chat, int personId) {
            return base.Channel.CreateChat(chat, personId);
        }
        
        public System.Threading.Tasks.Task<DataTier.Chat> CreateChatAsync(DataTier.Chat chat, int personId) {
            return base.Channel.CreateChatAsync(chat, personId);
        }
        
        public DataTier.Chat GetChat(int id) {
            return base.Channel.GetChat(id);
        }
        
        public System.Threading.Tasks.Task<DataTier.Chat> GetChatAsync(int id) {
            return base.Channel.GetChatAsync(id);
        }
        
        public System.Collections.Generic.List<DataTier.Chat> GetChatsByName(string name) {
            return base.Channel.GetChatsByName(name);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DataTier.Chat>> GetChatsByNameAsync(string name) {
            return base.Channel.GetChatsByNameAsync(name);
        }
        
        public bool UpdateChat(DataTier.Chat chat) {
            return base.Channel.UpdateChat(chat);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateChatAsync(DataTier.Chat chat) {
            return base.Channel.UpdateChatAsync(chat);
        }
        
        public bool DeleteChat(int id) {
            return base.Channel.DeleteChat(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteChatAsync(int id) {
            return base.Channel.DeleteChatAsync(id);
        }
        
        public System.Collections.Generic.List<DataTier.Profile> GetPersonsInChat(int chatId) {
            return base.Channel.GetPersonsInChat(chatId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DataTier.Profile>> GetPersonsInChatAsync(int chatId) {
            return base.Channel.GetPersonsInChatAsync(chatId);
        }
        
        public bool AddPersonToChat(int chatId, int personId) {
            return base.Channel.AddPersonToChat(chatId, personId);
        }
        
        public System.Threading.Tasks.Task<bool> AddPersonToChatAsync(int chatId, int personId) {
            return base.Channel.AddPersonToChatAsync(chatId, personId);
        }
        
        public bool RemovePersonFromChat(int chatId, int personId) {
            return base.Channel.RemovePersonFromChat(chatId, personId);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePersonFromChatAsync(int chatId, int personId) {
            return base.Channel.RemovePersonFromChatAsync(chatId, personId);
        }
    }
}
