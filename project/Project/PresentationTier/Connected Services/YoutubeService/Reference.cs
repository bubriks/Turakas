//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PresentationTier.YoutubeService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Song", Namespace="http://schemas.datacontract.org/2004/07/DataTier")]
    [System.SerializableAttribute()]
    public partial class Song : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityId {
            get {
                return this.ActivityIdField;
            }
            set {
                if ((this.ActivityIdField.Equals(value) != true)) {
                    this.ActivityIdField = value;
                    this.RaisePropertyChanged("ActivityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Url {
            get {
                return this.UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.UrlField, value) != true)) {
                    this.UrlField = value;
                    this.RaisePropertyChanged("Url");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayList", Namespace="http://schemas.datacontract.org/2004/07/DataTier")]
    [System.SerializableAttribute()]
    public partial class PlayList : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ActivityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ActivityId {
            get {
                return this.ActivityIdField;
            }
            set {
                if ((this.ActivityIdField.Equals(value) != true)) {
                    this.ActivityIdField = value;
                    this.RaisePropertyChanged("ActivityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="YoutubeService.IYoutubeService")]
    public interface IYoutubeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/AddSong", ReplyAction="http://tempuri.org/IYoutubeService/AddSongResponse")]
        bool AddSong(string url, int profileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/AddSong", ReplyAction="http://tempuri.org/IYoutubeService/AddSongResponse")]
        System.Threading.Tasks.Task<bool> AddSongAsync(string url, int profileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/GetVideoTitle", ReplyAction="http://tempuri.org/IYoutubeService/GetVideoTitleResponse")]
        string GetVideoTitle(string videoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/GetVideoTitle", ReplyAction="http://tempuri.org/IYoutubeService/GetVideoTitleResponse")]
        System.Threading.Tasks.Task<string> GetVideoTitleAsync(string videoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/GetVideoDuration", ReplyAction="http://tempuri.org/IYoutubeService/GetVideoDurationResponse")]
        int GetVideoDuration(string videoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/GetVideoDuration", ReplyAction="http://tempuri.org/IYoutubeService/GetVideoDurationResponse")]
        System.Threading.Tasks.Task<int> GetVideoDurationAsync(string videoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/FindSongsByName", ReplyAction="http://tempuri.org/IYoutubeService/FindSongsByNameResponse")]
        PresentationTier.YoutubeService.Song[] FindSongsByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/FindSongsByName", ReplyAction="http://tempuri.org/IYoutubeService/FindSongsByNameResponse")]
        System.Threading.Tasks.Task<PresentationTier.YoutubeService.Song[]> FindSongsByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/AddPlayList", ReplyAction="http://tempuri.org/IYoutubeService/AddPlayListResponse")]
        bool AddPlayList(string name, int profileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/AddPlayList", ReplyAction="http://tempuri.org/IYoutubeService/AddPlayListResponse")]
        System.Threading.Tasks.Task<bool> AddPlayListAsync(string name, int profileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/FindPlayListsByName", ReplyAction="http://tempuri.org/IYoutubeService/FindPlayListsByNameResponse")]
        PresentationTier.YoutubeService.PlayList[] FindPlayListsByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/FindPlayListsByName", ReplyAction="http://tempuri.org/IYoutubeService/FindPlayListsByNameResponse")]
        System.Threading.Tasks.Task<PresentationTier.YoutubeService.PlayList[]> FindPlayListsByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/AddSongToPlayList", ReplyAction="http://tempuri.org/IYoutubeService/AddSongToPlayListResponse")]
        bool AddSongToPlayList(string url, string playListId, int profileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/AddSongToPlayList", ReplyAction="http://tempuri.org/IYoutubeService/AddSongToPlayListResponse")]
        System.Threading.Tasks.Task<bool> AddSongToPlayListAsync(string url, string playListId, int profileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/GetSongsFromPlayList", ReplyAction="http://tempuri.org/IYoutubeService/GetSongsFromPlayListResponse")]
        PresentationTier.YoutubeService.Song[] GetSongsFromPlayList(string playListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/GetSongsFromPlayList", ReplyAction="http://tempuri.org/IYoutubeService/GetSongsFromPlayListResponse")]
        System.Threading.Tasks.Task<PresentationTier.YoutubeService.Song[]> GetSongsFromPlayListAsync(string playListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/RemovePlaylist", ReplyAction="http://tempuri.org/IYoutubeService/RemovePlaylistResponse")]
        bool RemovePlaylist(string playlistId, int profileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/RemovePlaylist", ReplyAction="http://tempuri.org/IYoutubeService/RemovePlaylistResponse")]
        System.Threading.Tasks.Task<bool> RemovePlaylistAsync(string playlistId, int profileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/RemoveSongFromPlaylist", ReplyAction="http://tempuri.org/IYoutubeService/RemoveSongFromPlaylistResponse")]
        bool RemoveSongFromPlaylist(string url, string playlistId, int profileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IYoutubeService/RemoveSongFromPlaylist", ReplyAction="http://tempuri.org/IYoutubeService/RemoveSongFromPlaylistResponse")]
        System.Threading.Tasks.Task<bool> RemoveSongFromPlaylistAsync(string url, string playlistId, int profileId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IYoutubeServiceChannel : PresentationTier.YoutubeService.IYoutubeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class YoutubeServiceClient : System.ServiceModel.ClientBase<PresentationTier.YoutubeService.IYoutubeService>, PresentationTier.YoutubeService.IYoutubeService {
        
        public YoutubeServiceClient() {
        }
        
        public YoutubeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public YoutubeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public YoutubeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public YoutubeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddSong(string url, int profileId) {
            return base.Channel.AddSong(url, profileId);
        }
        
        public System.Threading.Tasks.Task<bool> AddSongAsync(string url, int profileId) {
            return base.Channel.AddSongAsync(url, profileId);
        }
        
        public string GetVideoTitle(string videoId) {
            return base.Channel.GetVideoTitle(videoId);
        }
        
        public System.Threading.Tasks.Task<string> GetVideoTitleAsync(string videoId) {
            return base.Channel.GetVideoTitleAsync(videoId);
        }
        
        public int GetVideoDuration(string videoId) {
            return base.Channel.GetVideoDuration(videoId);
        }
        
        public System.Threading.Tasks.Task<int> GetVideoDurationAsync(string videoId) {
            return base.Channel.GetVideoDurationAsync(videoId);
        }
        
        public PresentationTier.YoutubeService.Song[] FindSongsByName(string name) {
            return base.Channel.FindSongsByName(name);
        }
        
        public System.Threading.Tasks.Task<PresentationTier.YoutubeService.Song[]> FindSongsByNameAsync(string name) {
            return base.Channel.FindSongsByNameAsync(name);
        }
        
        public bool AddPlayList(string name, int profileId) {
            return base.Channel.AddPlayList(name, profileId);
        }
        
        public System.Threading.Tasks.Task<bool> AddPlayListAsync(string name, int profileId) {
            return base.Channel.AddPlayListAsync(name, profileId);
        }
        
        public PresentationTier.YoutubeService.PlayList[] FindPlayListsByName(string name) {
            return base.Channel.FindPlayListsByName(name);
        }
        
        public System.Threading.Tasks.Task<PresentationTier.YoutubeService.PlayList[]> FindPlayListsByNameAsync(string name) {
            return base.Channel.FindPlayListsByNameAsync(name);
        }
        
        public bool AddSongToPlayList(string url, string playListId, int profileId) {
            return base.Channel.AddSongToPlayList(url, playListId, profileId);
        }
        
        public System.Threading.Tasks.Task<bool> AddSongToPlayListAsync(string url, string playListId, int profileId) {
            return base.Channel.AddSongToPlayListAsync(url, playListId, profileId);
        }
        
        public PresentationTier.YoutubeService.Song[] GetSongsFromPlayList(string playListId) {
            return base.Channel.GetSongsFromPlayList(playListId);
        }
        
        public System.Threading.Tasks.Task<PresentationTier.YoutubeService.Song[]> GetSongsFromPlayListAsync(string playListId) {
            return base.Channel.GetSongsFromPlayListAsync(playListId);
        }
        
        public bool RemovePlaylist(string playlistId, int profileId) {
            return base.Channel.RemovePlaylist(playlistId, profileId);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePlaylistAsync(string playlistId, int profileId) {
            return base.Channel.RemovePlaylistAsync(playlistId, profileId);
        }
        
        public bool RemoveSongFromPlaylist(string url, string playlistId, int profileId) {
            return base.Channel.RemoveSongFromPlaylist(url, playlistId, profileId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveSongFromPlaylistAsync(string url, string playlistId, int profileId) {
            return base.Channel.RemoveSongFromPlaylistAsync(url, playlistId, profileId);
        }
    }
}
